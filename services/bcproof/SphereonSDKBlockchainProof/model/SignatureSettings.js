/* eslint-disable */
/**
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.SignatureSettings = factory(root.BlockchainProof.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SignatureSettings model module.
   * @module ../model/SignatureSettings
   * @version 0.10
   */

  /**
   * Constructs a new <code>SignatureSettings</code>.
   * How to calculate the signature
   * @alias module:../model/SignatureSettings
   * @class
   * @param signatureType {module:../model/SignatureSettings.SignatureTypeEnum} How to calculate the signature during registration and verification. Defaults to the configured value if omitted
   */
  var exports = function(signatureType) {
    var _this = this;




    _this['signatureType'] = signatureType;


  };

  /**
   * Constructs a <code>SignatureSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:../model/SignatureSettings} obj Optional instance to populate.
   * @return {module:../model/SignatureSettings} The populated <code>SignatureSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('base64Secret')) {
        obj['base64Secret'] = ApiClient.convertToType(data['base64Secret'], 'String');
      }
      if (data.hasOwnProperty('keyConfig')) {
        obj['keyConfig'] = ApiClient.convertToType(data['keyConfig'], 'String');
      }
      if (data.hasOwnProperty('suppliedSignature')) {
        obj['suppliedSignature'] = ApiClient.convertToType(data['suppliedSignature'], 'String');
      }
      if (data.hasOwnProperty('signatureType')) {
        obj['signatureType'] = ApiClient.convertToType(data['signatureType'], 'String');
      }
      if (data.hasOwnProperty('keyId')) {
        obj['keyId'] = ApiClient.convertToType(data['keyId'], 'String');
      }
      if (data.hasOwnProperty('keyQualification')) {
        obj['keyQualification'] = ApiClient.convertToType(data['keyQualification'], 'String');
      }
    }
    return obj;
  }

  /**
   * An alternate Secret key that overrides the value in your configuration in base64. Used for generating a signature with a base64Secret
   * @member {String} base64Secret
   */
  exports.prototype['base64Secret'] = undefined;
  /**
   * Crypto keys config name when KEY_NAME_ONLY is supplied for key qualification
   * @member {String} keyConfig
   */
  exports.prototype['keyConfig'] = undefined;
  /**
   * Only use this if you calculate your own signature. Otherwise always leave this blank! We will use the signature as is for registration/verification
   * @member {String} suppliedSignature
   */
  exports.prototype['suppliedSignature'] = undefined;
  /**
   * How to calculate the signature during registration and verification. Defaults to the configured value if omitted
   * @member {module:../model/SignatureSettings.SignatureTypeEnum} signatureType
   */
  exports.prototype['signatureType'] = undefined;
  /**
   * Use a symmetric or asymmetric key from the crypto keys API to generate the signature.
   * @member {String} keyId
   */
  exports.prototype['keyId'] = undefined;
  /**
   * This determines whether yoy use fully qualified keyIds of the crypto-keys API in form (config/keys/keyname/version) or that you only use the keyname and provide the configuration here. The later means we will use the latest version by default
   * @member {module:../model/SignatureSettings.KeyQualificationEnum} keyQualification
   */
  exports.prototype['keyQualification'] = undefined;


  /**
   * Allowed values for the <code>signatureType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SignatureTypeEnum = {
    /**
     * value: "KEY_ID"
     * @const
     */
    "KEY_ID": "KEY_ID",
    /**
     * value: "SUPPLIED"
     * @const
     */
    "SUPPLIED": "SUPPLIED",
    /**
     * value: "SECRET"
     * @const
     */
    "SECRET": "SECRET",
    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"  };

  /**
   * Allowed values for the <code>keyQualification</code> property.
   * @enum {String}
   * @readonly
   */
  exports.KeyQualificationEnum = {
    /**
     * value: "KEY_NAME_ONLY"
     * @const
     */
    "KEY_NAME_ONLY": "KEY_NAME_ONLY",
    /**
     * value: "FULLY_QUALIFIED_KEY_ID"
     * @const
     */
    "FULLY_QUALIFIED_KEY_ID": "FULLY_QUALIFIED_KEY_ID"  };


  return exports;
}));


