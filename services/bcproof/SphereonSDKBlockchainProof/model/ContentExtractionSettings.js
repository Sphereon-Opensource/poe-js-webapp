/* eslint-disable */
/**
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.ContentExtractionSettings = factory(root.BlockchainProof.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ContentExtractionSettings model module.
   * @module ../model/ContentExtractionSettings
   * @version 0.10
   */

  /**
   * Constructs a new <code>ContentExtractionSettings</code>.
   * Content extraction Settings. Normally proofs are done solely on the full binary content of the file itself. Sometimes you want to look at particular parts of the file. For instance the content of a PDF file. Adobe PDF changes the file on save as, whilst the contents stays the same
   * @alias module:../model/ContentExtractionSettings
   * @class
   * @param binaryComparison {Boolean} Whether to do a binary comparison on the file
   * @param contentExtraction {Boolean} Whether to try a content extraction comparison on the file
   */
  var exports = function(binaryComparison, contentExtraction) {
    var _this = this;

    _this['binaryComparison'] = binaryComparison;
    _this['contentExtraction'] = contentExtraction;

  };

  /**
   * Constructs a <code>ContentExtractionSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:../model/ContentExtractionSettings} obj Optional instance to populate.
   * @return {module:../model/ContentExtractionSettings} The populated <code>ContentExtractionSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('binaryComparison')) {
        obj['binaryComparison'] = ApiClient.convertToType(data['binaryComparison'], 'Boolean');
      }
      if (data.hasOwnProperty('contentExtraction')) {
        obj['contentExtraction'] = ApiClient.convertToType(data['contentExtraction'], 'Boolean');
      }
      if (data.hasOwnProperty('minimumContentExtractionCharacters')) {
        obj['minimumContentExtractionCharacters'] = ApiClient.convertToType(data['minimumContentExtractionCharacters'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Whether to do a binary comparison on the file
   * @member {Boolean} binaryComparison
   */
  exports.prototype['binaryComparison'] = undefined;
  /**
   * Whether to try a content extraction comparison on the file
   * @member {Boolean} contentExtraction
   */
  exports.prototype['contentExtraction'] = undefined;
  /**
   * When using content extraction. Only apply it to content that is larger than the amount of characters specified in here. Please note that you want enough entropy when using content extraction. We suggest to not go lower than this value
   * @member {Number} minimumContentExtractionCharacters
   */
  exports.prototype['minimumContentExtractionCharacters'] = undefined;



  return exports;
}));


